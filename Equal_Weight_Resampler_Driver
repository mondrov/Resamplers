import logging
import math
import operator
import random

import numpy as np

import westpa
from westpa.core.we_driver import WEDriver
from westpa.core.segment import Segment
from westpa.core.states import InitialState

log=logging.getLogger(__name__)

class Equal_Weight_Driver(WEDriver):
  def _equal_weight_resampler(self,bin,target_count,ideal_weight):
    #get walkers and their weights from current bin
    segments = np.array(sorted(bin, key=operator.attrgetter('weight')), dtype=np.object_)
    weights = np.array(list(map(operator.attrgetter('weight'), segments)))

    #initialize lists for the new walkers and their weights as well as a count of the new walkers
    new_walkers = []

    #Start with sorting initial data
    ind = np.argsort(weights) # index for sorting the walkers in ascending order
    weights[::1].sort ## sort weights in ascending order
    walkers_init = list(np.take(segments,ind)) # sort walkers ascending
    weights_ascending = list(weights) # list weights ascending
    normalized_weights_ascending = np.array(weights_ascending) / sum(np.array(weights_ascending)) # normalize the walker weights


    cdf_values = [0]
    for i in range(len(normalized_weights_ascending)):
      cdf_values.append(cdf_values[i] + normalized_weights_ascending[i])
      # select random numbers between 0 and 1 and map it to the CDF
    target_count = int(target_count)
    for i in range(target_count):
      rand_idx = random.uniform(0,1)
      for i in range(len(cdf_values)-1):
        if rand_idx >= cdf_values[i] and rand_idx < cdf_values[i+1]:
          segment = walkers_init[i]
      new_segment = Segment(
              n_iter=segment.n_iter,
              weight=ideal_weight,
              parent_id=segment.parent_id,
              wtg_parent_ids=set(segment.wtg_parent_ids),
              pcoord=segment.pcoord.copy(),
              status=Segment.SEG_STATUS_PREPARED,
      )
      new_segment.pcoord[0,:] = segment.pcoord[0,:]
      new_walkers.append(new_segment)

    #remove the old list of walkers from the bin and replace with the new list of walkers
    bin.clear()
    bin.update(new_walkers)


  def _run_we(self):
     self._recycle_walkers()

     self._check_pre()
     total_number_of_particles = 0
     for (ibin, bin) in enumerate(self.next_iter_binning):

       #if bin is empty move on to next iteration
       if len(bin) == 0:
         continue

       #Get the target walker count and ideal weight for the bin
       target_count = self.bin_target_counts[ibin]
       segments = np.array(sorted(bin, key=operator.attrgetter('weight')), dtype=np.object_)
       weights = np.array(list(map(operator.attrgetter('weight'), segments)))
       ideal_weight = weights.sum() / target_count

       #Check if the bin already has the target number of walkers with weight evenly distributed and continue on to next iteration if so

       if len(bin) == target_count:
         TF=[]
         for i in range(len(bin)):
           if weights[i] == ideal_weight:
             TF.append(True)
           else:
             TF.append(False)
         if all(TF) == True:
           continue

       #run resampler on current bin
       self._equal_weight_resampler(bin,target_count,ideal_weight)
       total_number_of_particles += len(bin)
       #bin.clear()
     self._check_post()

     self.new_weights = self.new_weights or []
     log.debug('used intial states: {!r}'.format(self.used_initial_states))
     log.debug('available initial states: {!r}'.format(self.avail_initial_states))
